'''
4.1 변수
변수는 데이터를 담는 메모리 공간.
자료형(Data Type:데이터 또는 자료의 형식)
파이썬은 프로그램 실행시에 자료형을 판단하는 동적 형식 언어.
실행 전에 작동하면 정적 형식 언어

파이썬이 실행시에 판단하는 자료형과 의도한 자료형이 일치하는지 보려면
>>>type(12345)
<class 'int'>
데이터를 직접 입력해도 되고 변수를 입력할 수 있다.

4.2 수 다루기
데이터는 컴퓨터의 수 처리를 응용하는 것.
기본적으로 정수, 실수, 복소수.

4.2.1 정수
메모리가 허용하는한, 무한대의 정수를 다룰 수 있습니다.
인터프리터는 f=-3을 실행할 때가 되어서야 f가 정수라고 판단.

정수의 사칙연산(연산자Operator)
더하기:+
빼기:-
곱하기*
나눗셈의 몫 구하기://
나눗셈의 나머지 구하기:%
나누기(실수값):/

여러 가지 진법으로 수 출력하기
표현해야 하는 데이터의 비트 수가 늘어나면 16진수의 효용성은 더 커집니다.
숫자를 16진수로 출력하려면 hex()
>>>hex(255)
'0xff'
16진수를 10진수로
>>>a=0xFF
>>>a
255
0x는 16진수를 나타낼 때 사용하는 접두사. 0b는 2진수, 0o는 8진수.
숫자를 2진수로 출력하려면 bin()
>>>bin(8)
'0b1000'
2진수를 10진수로
>>>a=0b100
>>>a
4
8진수
>>>oct(8)
'0o10'
>>>a=0o10
>>>a
8

4.2.2 실수(Real Number)
부동 소수형은 컴퓨터로 소수의 소수점을 표현하는 방식.
부동 소수형은 소수점을 움직여서 소수를 표현하는 자료형
1)부동 소수형은 8바이트만을 이용해서 수를 표현. 즉, 한정된 범위의 수만 표현
2)디지털 방식으로 소수를 표현해야 하므로 정밀도에 한계

>>>a=3.14
>>>a
3.14
>>>type(a)
<class 'float'>

22/7은 무리수이지만, 3.142857142857143같이 8바이트만을 이용.
저장공간을 효율적으로 사용할 수 있지만 표현 범위가 제한적.

부동 소수형의 사칙 연산
기본 연산은 같다.
부동 소수형을 사용할 때 주의해야 할 점
정밀도의 한계는 부동 소수형이 어떻게 구성되고 동작하는가를 정의하는 표준인 IEEE754를 
따르는 모든 컴퓨터 시스템의 문제.
미미하지만 계산에서도 오차가 발생.
>>>a=43.2-43.1
>>>a
0.10000000000000142
그래서 부동 소수형이 들어간 계산 결과를 다른 값과 비교하고자 할 때에는 자신이
상정한 오차 범위 이내에 들어오는지를 판단하는 코드를 작성.
특정한 정밀도를 가진 수를 다루는 연산을 해야 한다면 decimal표준 라이브러리를 이용.

부동 소수형의 8바이트
1바이트의 메모리를 정수를 표현하는데 사용한다면 8개의 비트로는 256가지의 수를 표현
8바이트는 64비트로 2의64승을 표현.
부동 소수형은 8바이트만 가지고 수를 표현하지만, 굉장히 넓은 범위의 수를 표현.
-2.2*10^-308~1.8*10^308 하지만 유효숫자는 15자리밖에 없습니다.
15자리 이상의 수는 '대략적으로' 표현. => 한정된 정밀도(Precision)
맨앞부터 1bit:부호비트 11bit:지수부 52bit:가수부
부호 비트(Sign bit)는 수가 음수인지 양수인지를 구분. 0이면 양수, 1이면 음수.
지수는 소수점의 위치를 가리키기 위해 사용. 가수에는 정규화된 값.
2진수에는 항상 1로 시작하기 때문에 가수부에는 1을 제외한 나머지 값을 저장. 53비트 효과
11.11은 1.111에서 1을 제외한 .111만 가수부에 담기게 되는 것 '정규화(normalization)'
지수는 수의 규모를 파악하는데 유용하게 사용.
지수에는 실제 값에 1023을 더해 저장하는 바이어싱(biasing)을 사용.
결국 지수부에 담기는 비트에는 0보다 큰 양수만 담깁니다.
예로 7.25는 부호 비트는 0이고, 정규화하면 1.1101에서 1101만 가수 비트에 담깁니다.
1.1101*2^2이므로 지수는 2이고, 1023을 더해 1025를 저장하면 됩니다. 확인하려면
-1^부호*2^(지수-1023)*(1+가수)=-1^0*2^(1025-1023)*(1.1101)=111.01=7.25

4.2.3 복소수
정의
1)복소수는 a+-bi의 꼴로 나타낼 수 있는 수
2)a와 b는 실수, i는 허수 단위로 i^2=-1
3)켤레 복소수는 복소수 중 허수 부분의 부호가 반대인 복소수

파이썬에서는 허수 단위를 나타내는 부호로 i대신 j를 사용.
>>>a=2+3j
>>>a
(2+3j)
>>>type(a)
<class 'complex'>
>>>a.real #실수부
2.0
>>>a.imag #허수부
3.0
>>>a.conjugate() #켤레복소수
(2-3j)

복소수의 사칙 연산
기존 연산과 같지만, 몫과 나머지는 구할 수 없습니다. '/'만 사용가능

4.2.4 math 모듈을 이용한 계산
파이썬 코드를 담고 있는 .py 확장자를 가진 파일을 '모듈(module)'이라고 합니다.
파이썬은 인터프리터와 함께 매우 다양한 모듈을 제공.
>>>import math
사칙 연산자 말고도 다양한 계산 수단을 제공.

pi와 e
수학에서 사용되는 주요 상수.
>>>math.pi
3.141592....
>>>math.e
2.718281828...
파이썬에서 '.'은 '~의'로 해석하면 쉽습니다.
둘다 무한 소수이지만 float타입으로 정의(다른 함수와 함께 사용하기 위해).

절대값, 버림과 반올림
abs():절대값 계산 함수, 내장함수
round():반올림 계산 함수, 내장함수
trunc():버림 계산 함수, math 모듈
내장 함수(Built-in function)은 파이썬이 인터프리터에 함께 탑재해 놓은 함수로 import필요 없음
>>>abs(-10)
10
>>>round(1.5)
2
>>>math.trunc(1.5)
1

팩토리얼
1부터 어떤 양의 정수 n까지의 정수를 모두 곱한 것을 말합니다.
>>>math.factorial(5)
120

도와 라디안
degree는 원을 360도로 표현, radian은 반지름이 1인원에서 호의길이가 1인 부채꼴의 각을 2pi로 표현
degrees():라디안을 입력받아 도를 계산
radians():도를 입력받아 라디안을 계산
>>>math.degrees(math.pi)
180.0
>>>math.radians(180)
3.141592...

삼각함수
cos():입력된 라디안에 대한 코사인 값을 계산
sin():입력된 라디안에 대한 사인 값을 계산
tan():입력된 라디안에 탄젠트 값을 계산
acos():cos()의 역함수
asin():sin()의 역함수
atan():tan()의 역함수
>>>math.sin(math.radians(90))
1.0
>>>math.asin(1.0)
1.57096...

제곱과 제곱근
**:제곱 연산, 연산자
pow():**와 같음, math모듈
sqrt():제곱근 연산, math모듈
>>3**3 #3^3
27
>>>math.pow(3,3)
27.0
>>>math.sqrt(4)
2.0
세제곱근, 네제곱근은 지수의 분수꼴을 이용
>>>27**(1/3)
3.0
>>>math.pow(81,0.5)
9.0

로그
log():첫 번째 매개변수의 로그를 구합니다. 두 번째 매개변수는 밑수, 생략하면 e로 간주
log10():밑수가 10인 로그를 계산.
>>math.log(4,2) #log2(4)
2.0
>>>math.log(math.e) #loge(e)
1.0
>>>math.log(1000,10)
2.999999...
>>>math.log10(1000) #더 정확
3.0

4.3텍스트 다루기
각 문자마다 번호를 붙이고 메모리에 저장하거나 계산을 할 때에는 수로 처리하고 
프린터에 출력할 때에는 사람이 아는 문자로 출력하는 방식.
텍스트를 다루는 자료형으로 string을 제공, 문자를 끈으로 묶어놓은 것. 문자열
문자열 데이터를 작은 따옴표 또는 큰따옴표의 쌍으로 텍스트를 감싸서 표현.
여러 줄로 이루어진 문자열은 작음따옴표 3개 또는 큰따옴표 3개의 쌍으로.
>>>b="안녕하세요"
>>>b
'안녕하세요'
>>>c=' ' '어서와
파이썬은
처음이지?' ' '
>>>c
'어서와\n파이썬은\n처음이지?'
>>>type(c)
<class 'str'>
문자열은 파이썬의 데이터 형식인 순서열(Sequence) 형식의 한 종류.
+연산자는 두 문자열을 하나로 이어 붙인다.
>>>hello='Hello'
>>>world='World'
>>>hello_world=hello+', '+world
>>>hello_world
'Hello, World'
문자열의 분리는 대괄호 연산자 []를 통해 수행.
>>>s='Good Morning'
>>>s[0:4] #s의 0<=인덱스<4 .
'Good'
첫 번째 매개변수는 분리할 시작 위치, 두 번째는 마지막 위치
이렇게 일부를 분리해 내는 것을 '슬라이싱(Slicing)'이라고 합니다. 원본은 그대로 유지
문자열의 처음부터 슬라이싱하길 원한다면 첫 번째 매개변수를 생략,
마지막까지 슬라이싱하길 원하면 두 번째 매개변수를 생략
>>>a='Good Morning'
>>>a[:4] #a[0:4]
'Good' 
>>>a[5:]
'Morning'
특정 위치에 있는 문자를 참고하고 싶을 때는 첨자번호 하나만 입력.
>>>a='Good Morning'
>>>a[0]
'G'
in 연산자는 원하는 부분이 문자열 안에 존재하는지를 알려줍니다. True or False
>>>a='Good Morning'
>>>'Good' in a
True
>>>'X' in a
False
길이를 재는 함수로 len().
>>>a='Good Morning'
>>>len(a)
12

4.3.1 문자열 메소드
내장 함수들과는 달리 문자열 자료형 안에 들어 있습니다.
특정 자료형이 갖고 있는 함수를 메소드(method)라고 합니다.
startswith():원본 문자열이 매개변수로 입력한 문자열로 시작되는지를 판단.
>>>a='Hello'
>>>a.startswith('He')
True
>>>a.startswith('lo')
False
endswith():원본 문자열이 매개변수로 입력한 문자열로 끝나는지를 판단.
>>>a='Hello'
>>>a.endswith('He')
False
>>>a.endswith('lo')
True
find():원본 문자열 안에 매개변수로 입력한 문자열이 존재하는 위치를 앞에서부터 찾는다. 없으면 -1.
>>>a='Hello'
>>>a.find('ll')
2
>>>a.find('K')
-1
rfind():원본 문자열 안에 매개변수로 입력한 문자열이 존재하는 위치를 뒤에서부터 찾는다. 없으면 -1.
>>>a='Hello'
>>>a.rfind('H')
0
>>>a.rfind('lo')
3
count():원본 문자열 안에 매개변수로 입력한 문자열이 몇 번 등장하는지를 셉니다.
>>>a='Hello'
>>>a.count('l')
2
lstrip():원본 문자열 왼쪽에 있는 공백을 제거합니다.
>>>'      Left Strip'.lstrip()
'Left Strip'
rstrip():원본 문자열 오른쪽에 있는 공백을 제거합니다.
>>>'Right Strip        '.rstrip()
'Right Strip'
strip():원본 문자열 양쪽에 있는 공백을 제거합니다.
>>>'    Strip     '.strip()
'Strip'
isalpha():원본 문자열이 알파벳으로만 이루어져 있는지를 평가.
>>>'ABCDefgh'.isalpha()
True
>>>'123ABC'.isalpha()
False
isnumeric():원본 문자열이 수로만 이루어져 있는지를 평가.
>>>'1234'.isnumeric()
True
>>>'123ABC'.isnumeric()
False
isalnum():원본 문자열이 알파벳과 수로만 이루어져 있는지를 평가합니다.
>>>'1234ABC'.isalnum()
True
>>>'1234 ABC'.isalnum() #' '는 기호
False
replace():원본 문자열에서 찾고자 하는 문자열을 바꾸고자 하는 문자열로 변경
>>>a='Hello, World'
>>>b=a.replace('World', 'Korea')
>>>a
'Hello, World'
>>>b
'Hello, Korea'
split():매개변수로 입력한 문자열을 기준으로 원본 문자열을 나눠 리스트를 만듭니다.
>>>a='Apple, Orange, Kiwi'
>>>b=a.split(',')
>>>b
['Apple', 'Orange', 'Kiwi']
>>>type(b)
<class 'list'>
upper():원본 문자열을 모두 대문자로 바꾼 문자열을 내놓습니다.
>>>a='lower case'
>>>b=a.upper()
>>>a
'lower case'
>>>b
'LOWER CASE'
lower():원본 문자열을 모두 소문자로 바꾼 문자열을 내놓습니다.
>>>a='UPPER CASE'
>>>b=a.lower()
>>>a
'UPPER CASE'
>>>b
'upper case'
format():형식을 갖춘 문자열을 만들 때 사용. 문자열 안에 중괄호 {}에 다른 데이터가
들어갈 자리를 만들어두고 format()을 호출할 때 이자리에 들어갈 데이터를 순서대로 넣어주면
원하는 형식의 문자열을 만들어 낼 수 있습니다.
>>>a='My name is {0}. I am {1} years old.'.format('Mario',40)
>>>a
'My name is Mario. I am 40 years old.'
>>>b='My name is {name}. I am {age} years old.'.format(name='Luigi', age=35)
>>>b
'My name is Luigi. I am 35 years old.'

4.4 수에서 텍스트로, 텍스트에서 수로
내장 함수 input()은 사용자로부터 입력을 받아들여 프로그램에게 전달해주는데,
전달하는 데이터의 형식이 문자열입니다.
앞에 모든 형식들은 모두 '생성자(Constructor)'을 가지고 있는데,
생성자는 각 형식의 변수를 생성할 때 호출하는 함수입니다.
형식의 이름 뒤에 함수처럼 괄호()를 붙인 꼴.
int의 생성자는 int(), float의 생성자는 float()....
파이썬은 숫자 형식의 생성자 안에 문자열을 해당 형식으로 변환하는 기능을 탑재.

input_multiply.py

숫자 형식을 문자열로 변환하는 프로그램
>>>text="원주율은 " + str(math.pi) + "입니다."
>>>text
'원주율은 3.14....입니다.'

4.5 비트 다루기
파이썬에서 다루는 데이터의 기본 단위는 '바이트(Byte)'.
<<:왼쪽 쉬프트 연산자, 첫 번째 피연산자의 비트를 두 번째 피연산자의 수만큼 왼쪽으로 이동
>>:오른쪽 쉬프트 연산자, 첫 번째 피연산자의 비트를 두 번째 피연산자의 수만큼 오른쪽으로 이동
&:논리곱(AND)연산자, 두 피연산자의 비트 논리곱을 수행.
|:논리합(OR)연산자, 두 피연산자의 비트 논리합을 수행.
^:배타적 논리합(XOR)연산자, 두 피연산자의 비트 배타적 노리합을 수행
~:보수(NOT)연산자, 피연산자의 비트를 0은 1로, 1은 0으로 반전. 단항 연산자.

4.5.1 쉬프트 연산자
Shift Operator는 비트를 왼쪽이나 오른쪽으로 이동시키는 기능.
왼쪽으로 옮기면, 밀려 나온 비트는 버리고, 비어 있는 비트에는 0으로 채운다.
오른쪽도 같지만 음수에서는 이동시키고 빈자리에 0이 아닌 1을 채웁니다.
>>>a=240 #00000000 11110000
>>>a<<2 #00000011 11000000
960
원본을 a, 옮긴 비트 수를 b라고 할 때, 왼쪽시프트는 a*2^b, 오른쪽은 a/2^b.
시프트 연산은 고속의 곱셈과 나눗셈을 구현, 데이터를 다시 하나의 수로 재조립하는데에 사용.
>>>c=-255
>>>hex(c) #-255
-0xff
>>>hex(c>>1) #-128
-0x80

4.5.2 비트 논리 연산자
논리 연산은 참 또는 거짓의 값을 피연산자로 하는 연산.
데이터의 각 비트에 대해 수행하는 논리 연산.
>>>9 & 10 #1001 & 1010
8 #1000
>>>9 | 10 #1001 | 1010
11 #1011
>>>9 ^ 10 #1001 ^ 1010
3 #0011
>>>a=255 #00000000 00000000 00000000 11111111
>>>~a #11111111 11111111 11111111 00000000
-256

'''