'''
8.1 모듈
Module은 독자적인 기능을 갖는 구성 요소
파이썬에서는 각각의 소스 파일을 모듈이라고 합니다.
표준 모듈은 파이썬과 함께 따라오는 모듈.
사용자 생성 모듈은 프로그래머가 직접 작성한 모듈.
서드파티(3rd Party)모듈은 다른 프로그래머, 또는 업체에서 제공한 모듈.

8.1.1 두 개의 소스 파일로 만드는 하나의 프로그램
import문을 이용해 모듈을 불러와 함수를 사용할 수 있다.
모듈을 분리함으로써 코드를 재사용할 수 있다.
calculator.py
calc_tester.py

8.1.2 import에 대해
import:다른 모듈 내의 코드에 대한 접근.
import가 접근 가능하게 하는 코드에는 변수, 함수, 클래스 등이 모두 포함.
1)import 모듈 #모듈의 실제 파일 명은 "모듈.py"
2)from 모듈 import 변수 또는 함수
두 개의 차이는 함수를 사용할 때 ~.을 사용하느냐 안사용하게 하느냐에 차이.
2-1)사용할 변수나 함수의 이름을 일일이 명기해주는 방식.
calc_tester2.py
2-2)콤마을 이용해서 여러 함수의 이름을 한 줄에 넣는 스타일.
calc_tester3.py
2-3)와일드카드(*)를 이용할 수도 있습니다.
calc_tester4.py
*를 이용하면 나중에 어떤 모듈 함수를 불러오고 있는지 파악하기 힘들어질 수 있다.
그래서 모듈에 접근할 때에는 불러올 변수, 함수의 이름을 정확하게 명시하는 것이 좋다.

모듈이름을 일일이 입력하기 힘들 때 as 키워드를 이용.
import 모듈 as 새이름
calc_tester5.py

8.1.3 모듈을 찾아서
다른 모듈과 같은 디렉터리에 있어서 쉽게 불러올 수 있었습니다.
파이썬의 모듈 경로  탐색 규칙
1)파이썬 인터프리터 내장 모듈
2)sys.path에 정의되어 있는 디렉토리
sys모듈은 내장 모듈로 c언어로 프로그래밍되어 있습니다.
sys모듈은 파이썬의 모듈에 관련된 정보를 몇 가지 갖고 있습니다. '파이썬 내장 모듈의 목록'
>>>print(sys.builtin_module_names)
('_ast', '_bisect', .............)
파이썬은 import가 실행되면 가장 먼저 이 목록을 확인해서 모듈의 이름이 존재하는지 확인.
내장 모듈 목록에 없다면 sys.path에 정의되어 있는 디렉토리에서 모듈 파일을 탐색.
sys.path에 정의되어 있는 디렉토리는 크게 3가지
1)파이썬 모듈이 실행되고 있는 현재 디렉토리
2)PYTHONPATH 환경변수에 정의되어 있는 디렉토리
3)파이썬과 함께 설치된 기본 라이브러리
sys_path.py

환경변수 지정하는 법
>set PYTHONPATH=C:(역슬래쉬)디렉토리

8.1.4 메인 모듈과 하위 모듈
파이썬에는 최상위 수준(Top level)에서 실행되는 스크립트가 있을 뿐, 메인 함수는 따로 없다.
이 말은 명령 프롬프트 창이나 탐색기를 이용하여 파이썬 모듈을 실행하는 것.
최상위 수준으로 실행되는 스크립트를 일컬어 메인 모듈이라고 합니다.
어떻게 만드느냐가 아닌 "어떻게 실행하느냐"에 따라 메인 모듈이 결정.
파이썬에는 내장 전역 변수인 __name__이 있는데, 이 변수는 모듈이 최상위 수준으로
실행될 때 '__main__'으로 지정.
top_level.py

메인 모듈이 import문을 이용하여 불러오는 모듈은 하위 모듈(Sub Module)
하위 모듈의 __name__ 변수는 메인 모듈과 달리 모듈 자체의 이름을 담고 있습니다.
main_sub/sub.py
main_sub/main.py

import sub를 하면 sub.py의 내용도 실행됩니다.
sub.py의 코드를 최상위 수준일 때만 실행되도록 하고 싶을 때는 어떻게 해야 할까요?
최상위 수준일 떄 __name__변수가 '__main__'으로 지정되는 것을 이용하면 됩니다.
main_sub2/sub.py
main_sub2/main.py

8.2 패키지
모듈의 수가 크게 늘어나도 모듈의 이름이 충돌하거나 찾기 어렵지 않게 디렉토리 별로 정리.
이렇게 모듈을 모아놓은 디렉토리를 패키지(Package)라고 합니다.
평범한 디렉토리가 '파이썬의 패키지'로 인정받으려면 __init__.py파일을 그 경로에 갖고 있어야.
calc_tester6.py

8.2.1 __init__.py에 대해
패키지가 '__init__.py'파일을 갖고 있는 디렉토리.
__init__.py는 보통 비워두는 것.
손대는 경우는 __all__이라는 변수를 조정할 때.
__all__은 코드를 실행할 때 패키지로부터 반입할 모듈의 목록을 정의하기 위해 사용.
from 패키지 import *
import *가 선택적으로 모듈을 반입하도록 하려면
__init__.py에서 __all__=['eeny', 'meeny', 'miny', 'moe'] 식으로 지정.
import*를 모듈에 대해 사용하는 경우에는 __all__변수를 확인해야 반입목록을 알 수 있다.
luv_song/eeny.py
luv_song/meeny.py
luv_song/miny.py
luv_song/moe.py
luv_song/__init__.py
luv_song_test.py

8.3 site-packages에 대해
site-packages는 파이썬의 기본 라이브러리 패키지 외에 추가적인 패키지를 설치하는 디렉토리.
각종 서드 파티 모듈도 이 곳에 설치됩니다.
site-packages는 파이썬이 기본적으로 모듈을 탐색하는 경로에 포함되어 있습니다.
site-packages예제는 편의상 현재 디렉토리에서 진행
my_package2/my_module.py
>>>from my_package2 import my_module
>>>my_module.info()
my_package2.my_module
C:~
site-packages 디렉토리에 여러 가지 소프트웨어가 사용할 공통 모듈을 넣어두면
물리적인 경로에 구애받지 않고 모듈에 접근하여 반입할 수 있습니다.

'''